<?php declare(strict_types=1);
/**
 * (c) 2005-2024 Dmitry Lebedev <dl@adios.ru>
 * This source code is part of the Ultra data package.
 * Please see the LICENSE file for copyright and licensing information.
 */
namespace Ultra\Data;

/**
 * Интерфейс выполнения запросов и получения структурированных результатов
 * (для SELECT запросов)
 */
interface Inquirer {
	public function prefix(string $pref, string $mark='~'): void;
	/**
	* Вернуть результат SQL запроса в виде двумерного массива.
	* Массивы первого и второго измерения имеют целочисленную индексацию.
	* $query  - строка SQL запроса, возможно имеющая метки для заполнения
	*           переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
    *           в списке соответствует номеру метки.
	*/
	public function rows(string $query, array $value=[]): array;

	/**
	* Вернуть результат SQL запроса в виде двумерного массива.
	* Индексы первого измерения целочисленные, индексы второго строковые,
	* ассоциированы с именами столбцов, указанными в запросе.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function assoc(string $query, array $value=[]): array;

	/**
	* Вернуть колонку - список значений одного поля, либо первого поля
	* из списка полей, если полей в запросе указано несколько.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function column(string $query, array $value=[]): array;

	/**
	* Вернуть комбинацию двух полей в виде массива, при этом первое поле будет
	* являться ключем массива, второе соответствующим значением.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function combine(string $query, array $value=[]): array;

	/**
	* Вернуть результат SQL запроса в виде двумерного массива.
	* Массивы первого измерения индексированы значением первого столбца
	* выборки (соответственно значения в таком столбце должны быть уникальны,
	* иначе будет возвращаться последняя строка, array_unique наоборот),
	* индексы второго ассоциированы с порядком столбцов, указанных в запросе.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function table(string $query, array $value=[]): array;

	/**
	* Вернуть результат SQL запроса в виде двумерного массива.
	* Массивы первого измерения индексированы значением одного из столбцев
	* выборки (соответственно значения в таком столбце должны быть уникальны,
	* иначе будет возвращаться последняя строка, array_unique наоборот),
	* индексы второго ассоциированы с именами столбцов, указанными в запросе.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function view(string $query, array $value=[]): array;

	/**
	* Вернуть массив результата SQL запроса (первую строку запроса)
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	* $type   - тип индексации результирующей выборки.
	*/
	public function row(string $query, array $value=[]): array;

	/**
	* Вернуть единственный результат SQL запроса.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function result(string $query, array $value=[]): string;

	/**
	* Выполнить SQL запрос.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function run(string $query, array $value=[], bool $suba=false);

	/**
	* Выполнить SQL запрос, вернуть количество рядов затронутое запросом.
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function affect(string $query, array $value=[], bool $suba=false): int;

	/**
	* Вернуть результат SQL запроса в виде трехмерного массива.
	*
	* SQL => SELECT `f_1`, `f_2`, ... `f_n` FROM `t`
	*
	* RETURN array(
	*    
	*   `v_1` => array(
	*       
	*       0   => array(`v_1_1`, `v_2_1`, ... `v_n_1`),
	*       1   => array(`v_1_2`, `v_2_2`, ... `v_n_2`),
	*       2   => array(`v_1_3`, `v_2_3`, ... `v_n_3`),
	*       ..........................................
	*       n-1 => array(`v_1_n`, `v_2_n`, ... `v_n_n`)
	*
	*    )
	*
	*   `v_2` => array(
	*       
	*       0   => array(`v_2_1`, `v_2_1`, ... `v_n_1`),
	*       1   => array(`v_2_2`, `v_2_2`, ... `v_n_2`),
	*       2   => array(`v_2_3`, `v_2_3`, ... `v_n_3`),
	*       ..........................................
	*       n-1 => array(`v_2_n`, `v_2_n`, ... `v_n_n`)
	*
	*    )
	*
	*    ...............................................
	* )
	*
	*
	* $query  - строка SQL запроса, возможно имеющая метки
	*           для заполнения переменными.
	*           Метки имеют вид {0}, {1}, ... {n}
	* $values - список значений для заполнения, порядковый номер
	*           в списке соответствует номеру метки.
	*/
	public function slice(string $query, array $value = []): array;
	/**
	* @return array[mixed][char][char] (assoc)
	*/
	public function aslice(string $query, array $value = []): array;
	/*
	* @return array[mixed][int][char]
	*/
	public function shift(string $query, array $value = []): array;
	/**
	* @return array[mixed][char][char] (assoc)
	*/
	public function ashift(string $query, array $value = []): array;
	/**
	* @return array[mixed][int][mixed]
	*/
	public function columns(string $query, array $value = []): array;
	/*
	* @return array[mixed][mixed][mixed]
	*/
	public function combines(string $query, array $value = []): array;
	/**
	* @return
	*/
	public function join(string $query, array $value = []): string;
	/**
	* @return
	*/
	public function in(array $value, string $or_field = ''): string;
	/**
	* @return
	*/
	public function keys(array $value, string $or_field=''): string;
}
